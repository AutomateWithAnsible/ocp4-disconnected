---
- name: Reconfigure Cluster to use the offline registry mirror
  hosts: localhost
  vars_files:
    vars/main.yml
  tasks:

    - name: Get list of image registires referenced by the olm catalog
      command: "{{ inventory_dir }}/scripts/extract_olm_image_repos.sh"
      register: reg_olm_repo_references
      changed_when: false

    - template:
        src: registries.conf.j2
        dest: /tmp/registries.conf

    - name: Get MachineConfigPool objects before pushing out new machineconfig
      k8s_facts:
        api_version: machineconfiguration.openshift.io/v1
        kind: MachineConfigPool
      register: reg_mcpool_before

    - name: Create a new machine config to customise registries.conf
      k8s:
        state: present
        definition: "{{ lookup('template', 'machine-config.yaml.j2') }}"
      loop:
        - "master"
        - "worker"
      loop_control:
        loop_var: role
      register: reg_mc_config

    - name: Wait for new machine configs to be rendered
      k8s_facts:
        api_version: machineconfiguration.openshift.io/v1
        kind: MachineConfigPool
      register: reg_mcpool_after
      vars:
        mconfig_before: "{{ reg_mcpool_before.resources | map(attribute='spec.configuration.name') | list }}"
        # this variable holds the list of machine configs name before update
        mconfig_after: "{{ reg_mcpool_after.resources | map(attribute='spec.configuration.name') | list }}"
        # this variable holds the list of machine configs after the update
      until:
        - mconfig_before | intersect(mconfig_after)  | length == 0
        # if all the machine configs have been updated with the newly rendered
        # machine config names, then the intersection of these 2 sets should be
        # an empty set.
      retries: 12 # wait for 2 minutes (12 retires x 10 sec = 120 sec)
      delay: 10
      when:
        - reg_mc_config.changed

    - name: Wait for updated machine configs to be pushed out
      k8s_facts:
        api_version: machineconfiguration.openshift.io/v1
        kind: MachineConfigPool
      register: reg_mcpool_status
      vars:
        status_query: "resources[*].status.conditions[?type=='Updated'].status"
        # query to extract all status for the UPDATED column in
        # machine config pool
        update_status: "{{ reg_mcpool_status | json_query(status_query) | flatten | unique }}"
        # once have all the status in an array, flatten it and unique it.
        # All of the status's should be True. So after flattening and uniquing
        # it we are expecting to see an array with just 1 element ['True']
      until:
        - update_status == ['True']
      retries: 60 # wait for 1 hour max
      delay: 60   # check every minnute or 60 seconds
      # TODO: As of now we wait for 1 hours for the config changes to be pushed
      # out. This is purely an arbitary number based on what we found whilst
      # installing a fresh cluster. Ideally the amount of time we wait, should
      # be a factor of the total number nodes in the cluster.
      # May be a future nice to have :-)
